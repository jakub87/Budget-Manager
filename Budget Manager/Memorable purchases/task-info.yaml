type: edu
custom_name: stage4
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import budget.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        public BudgetManagerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test1),

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test2),

                new TestCase<String>()
                    .setInput("4\n0")
                    .setCheckFunc(BudgetManagerTest::test3),

                new TestCase<String>()
                    .setInput("1\n400\n4\n1\n200\n4\n0")
                    .setCheckFunc(BudgetManagerTest::test4),

                new TestCase<String>()
                    .setInput("1\n1000\n2\n" +
                        "1\nAlmond 250g\n35.43\n" +
                        "1\nMilk\n3.50\n" +
                        "1\nRed Fuji Apple\n5.99\n" +
                        "1\nEggs\n3.99\n" +
                        "1\nFIJI Natural Artesian Water\n25.98\n" +
                        "1\nHershey's milk chocolate bars\n8.54\n" +
                        "1\nGreat Value Broccoli Florets\n1.00\n" +
                        "1\nKeystone Ground Bee\n6.28\n" +
                        "2\nGildan LT\n8.61\n" +
                        "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                        "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                        "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                        "3\nCinema\n8.73\n" +
                        "3\nSkate rental\n30\n" +
                        "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                        "4\nChick-fil-A $10 Gift Card\n10\n" +
                        "4\nDebt\n3.50\n" +
                        "5\n5\n0").setCheckFunc(BudgetManagerTest::test5),

                new TestCase<String>()
                    .setInput("6\n4\n3\n5\n1\n6\n0")
                    .setCheckFunc(BudgetManagerTest::test6)
            );
        }

        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                    "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                        "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 4\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                    "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                    "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 10\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                    "Balance is wrong after adding income!.\n" +
                        "Expected:\n" +
                        "Balance: $400.00\n" +
                        "Your output:\n" +
                        balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                    "Your program should create purchases.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 12\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                    "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28",
                "Gildan LT $8.61",
                "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                "Wrangler Men's Stretch Cargo Pant $19.97",
                "LEGO DUPLO Town Farm Animals $10.10",
                "Cinema $8.73",
                "Skate rental $30.00",
                "Sensodyne Pronamel Toothpaste $19.74",
                "Chick-fil-A $10 Gift Card $10.00",
                "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your all purchases list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of all purchases is wrong. Expected:\n" +
                        "Total sum: $214.36\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                    "Your all total sum is wrong!");
            }


            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[] {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your food list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of food list is wrong. Expected:\n" +
                        "Total sum: $90.71\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                    "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/Food.java
  visible: true
  text: |
    package budget;

    public class Food extends Purchase{
        @Override
        public void display() {
            System.out.println("\nFood:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/Menu.java
  visible: true
  text: |
    package budget;

    public class Menu {
        public static void main() {
            System.out.println("\nChoose your action:");
            System.out.println("1) Add income");
            System.out.println("2) Add purchase");
            System.out.println("3) Show list of purchases");
            System.out.println("4) Balance");
            System.out.println("0) Exit");
        }

        public static void purchaseType() {
            System.out.println("\nChoose the type of purchase");
            System.out.println("1) Food");
            System.out.println("2) Clothes");
            System.out.println("3) Entertainment");
            System.out.println("4) Other");
            System.out.println("5) Back");
        }

        public static void purchaseList() {
            System.out.println("\nChoose the type of purchase");
            System.out.println("1) Food");
            System.out.println("2) Clothes");
            System.out.println("3) Entertainment");
            System.out.println("4) Other");
            System.out.println("5) All");
            System.out.println("6) Back");
        }

    }
  learner_created: true
- name: src/budget/Account.java
  visible: true
  text: |
    package budget;

    import java.math.BigDecimal;
    import java.util.LinkedHashMap;
    import java.util.Map;

    public class Account {
        private BigDecimal balance;
        private Map<String, BigDecimal> purchases;
        private BigDecimal purchasesTotalSum;

        public Account() {
            balance = BigDecimal.ZERO;
            purchases = new LinkedHashMap<>();
            purchasesTotalSum = BigDecimal.ZERO;
        }

        public boolean addPurchase(String purchase, BigDecimal price) {
            purchases.put(purchase, price);
            return true;
        }

        public BigDecimal getBalance() {
            return balance;
        }

        public void setBalance(BigDecimal money) {
            this.balance = money;
        }

        public Map<String, BigDecimal> getPurchases() {
            return purchases;
        }

        public BigDecimal getPriceOfPurchases() {
            return purchasesTotalSum;
        }

        public void setPriceOfPurchases(BigDecimal priceOfPurchases) {
            this.purchasesTotalSum = priceOfPurchases;
        }

        //
    //    public void setPurchases(Map<String, BigDecimal> purchases) {
    //        this.purchases = purchases;
    //    }
    }
  learner_created: true
- name: src/budget/interfaces/PurchaseMethods.java
  visible: true
  text: |
    package budget.interfaces;

    import budget.Purchase;

    import java.math.BigDecimal;

    public interface PurchaseMethods {
        boolean addIncome();
        void showBalance();
        boolean addPurchase();
        void display();
    }
  learner_created: true
- name: src/budget/Category.java
  visible: true
  text: |
    package budget;

    public enum Category {
        FOOD,
        CLOTHES,
        ENTERTAINMENT,
        OTHER,
        ALL
    }
  learner_created: true
- name: src/budget/Clothes.java
  visible: true
  text: |
    package budget;

    public class Clothes extends Purchase {
        @Override
        public void display() {
            System.out.println("\nClothes:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/Entertainment.java
  visible: true
  text: |
    package budget;

    public class Entertainment extends Purchase{
        @Override
        public void display() {
            System.out.println("\nEntertainment:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/Purchase.java
  visible: true
  text: |-
    package budget;

    import budget.interfaces.PurchaseMethods;

    import java.math.BigDecimal;
    import java.math.RoundingMode;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class Purchase implements PurchaseMethods {
        private Scanner scanner;
        public static BigDecimal balance = BigDecimal.ZERO;
        public static BigDecimal purchasesTotalSum = BigDecimal.ZERO;
        private BigDecimal purchasePrice = BigDecimal.ZERO; // zmienna dla kaznej klasy

        public static Map<String, BigDecimal> allPurchases;
        private Map<String, BigDecimal> purchases;

        public Purchase() {
            scanner = new Scanner(System.in);
            purchases = new LinkedHashMap<>();
            allPurchases = new LinkedHashMap<>();
        }

        @Override
        public boolean addPurchase() {
            System.out.println("\nEnter purchase name:");
            String purchase = scanner.nextLine();
           // System.out.println();
            System.out.println("Enter its price:");
            BigDecimal price = new BigDecimal(scanner.nextLine());
           // System.out.println();
            getPurchases().put(purchase, price);
            allPurchases.put(purchase, price);

            balance = balance.subtract(price);
            if (getBalance().compareTo(BigDecimal.ZERO) < 0) {
                setBalance(BigDecimal.ZERO);
            }
            purchasesTotalSum = purchasesTotalSum.add(price); // suma wszystkich produktow
            purchasePrice = purchasePrice.add(price);
            System.out.println("Purchase was added!");
            return true;
        }

        public Map<String, BigDecimal> getAllPurchases() {
            return allPurchases;
        }

        public void displayAll() {
            System.out.println();
            getAllPurchases().forEach((product, price) -> System.out.println(product + " $" + price.setScale(2, RoundingMode.HALF_EVEN)));
            System.out.println("Total sum: $" + purchasesTotalSum.setScale(2, RoundingMode.HALF_EVEN));
        }

        @Override
        public void display() {
            if (getPurchases().isEmpty()) {
                System.out.println("Purchase list is empty!");
            } else {
                getPurchases().forEach((product, price) -> System.out.println(product + " $" + getPurchasePrice().setScale(2, RoundingMode.HALF_EVEN)));
                System.out.println("Total sum: $" + getPurchasePrice().setScale(2, RoundingMode.HALF_EVEN));
            }
        }

        public static void setBalance(BigDecimal balance) {
            Purchase.balance = balance;
        }

        public static BigDecimal getBalance() {
            return balance;
        }

        public BigDecimal getPurchasePrice() {
            return purchasePrice;
        }

        public Map<String, BigDecimal> getPurchases() {
            return purchases;
        }

        public static BigDecimal getPurchasesTotalSum() {
            return purchasesTotalSum;
        }

        public static void setPurchasesTotalSum(BigDecimal purchasesTotalSum) {
            Purchase.purchasesTotalSum = purchasesTotalSum;
        }


        @Override
        public boolean addIncome() {
            System.out.println("\nEnter income:");
            int income = Integer.parseInt(scanner.nextLine());
            BigDecimal currentMoney = getBalance();
            setBalance(currentMoney.add(BigDecimal.valueOf(income)));
            System.out.println("Income was added!");
            return true;
        }

        @Override
        public void showBalance() {
            System.out.println("\nBalance: $" + getBalance().setScale(2, RoundingMode.HALF_EVEN));
        }

        }
  learner_created: true
- name: src/budget/Other.java
  visible: true
  text: |
    package budget;

    public class Other extends Purchase {
        @Override
        public void display() {
            System.out.println("\nOther:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/model/Product.java
  visible: true
  learner_created: true
- name: src/budget/controler/BudgetManager.java
  visible: true
  learner_created: true
- name: src/budget/interfaces/BudgetRepository.java
  visible: true
  learner_created: true
- name: src/budget/interfaces/ProductRepository.java
  visible: true
  learner_created: true
- name: src/budget/interfaces/ListRepository.java
  visible: true
  learner_created: true
- name: purchases.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/76/stages/424/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 31 Dec 2020 12:21:57 UTC
record: 4
