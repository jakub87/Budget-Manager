type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/Menu.java
  visible: true
  text: |
    package budget;

    public class Menu {
        public static void main() {
            System.out.println("\nChoose your action:");
            System.out.println("1) Add income");
            System.out.println("2) Add purchase");
            System.out.println("3) Show list of purchases");
            System.out.println("4) Balance");
            System.out.println("5) Save");
            System.out.println("6) Load");
            System.out.println("0) Exit");
        }

        public static void purchaseType() {
            System.out.println("\nChoose the type of purchase");
            System.out.println("1) Food");
            System.out.println("2) Clothes");
            System.out.println("3) Entertainment");
            System.out.println("4) Other");
            System.out.println("5) Back");
        }

        public static void purchaseList() {
            System.out.println("\nChoose the type of purchase");
            System.out.println("1) Food");
            System.out.println("2) Clothes");
            System.out.println("3) Entertainment");
            System.out.println("4) Other");
            System.out.println("5) All");
            System.out.println("6) Back");
        }

    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: "��\0\x05sr\0\x1ebudget.controler.BudgetManagerwA���c}�\x02\0\x06L\0\x03allt\0\
    \x10Ljava/util/List;L\0\abalancet\0\x16Ljava/math/BigDecimal;L\0\aclothesq\0~\0\
    \x01L\0\nentertainmentq\0~\0\x01L\0\x04foodq\0~\0\x01L\0\x05otherq\0~\0\x01xpsr\0\
    \x13java.util.ArrayListx��\x1d��a�\x03\0\x01I\0\x04sizexp\0\0\0\x11w\x04\0\0\0\
    \x11sr\0\x14budget.model.Product\x11\x0f�XtT��\x02\0\x02L\0\x04namet\0\x12Ljava/lang/String;L\0\
    \x05priceq\0~\0\x02xpt\0\vAlmond 250gsr\0\x14java.math.BigDecimalT�\x15W��(O\x03\
    \0\x02I\0\x05scaleL\0\x06intValt\0\x16Ljava/math/BigInteger;xr\0\x10java.lang.Number�\
    ��\x1d\v���\x02\0\0xp\0\0\0\x02sr\0\x14java.math.BigInteger���\x1f�;�\x1d\x03\0\
    \x06I\0\bbitCountI\0\tbitLengthI\0\x13firstNonzeroByteNumI\0\flowestSetBitI\0\x06\
    signum[\0\tmagnitudet\0\x02[Bxq\0~\0\f����������������\0\0\0\x01ur\0\x02[B��\x17\
    �\x06\bT�\x02\0\0xp\0\0\0\x02\n�xxsq\0~\0\x06t\0\x04Milksq\0~\0\n\0\0\0\x02sq\0\
    ~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x01^xxsq\0~\0\x06t\0\x0e\
    Red Fuji Applesq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\
    \0\0\0\x02\x02Wxxsq\0~\0\x06t\0\x04Eggssq\0~\0\n\0\0\0\x02sq\0~\0\x0e���������\
    �������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x01�xxsq\0~\0\x06t\0\eFIJI Natural Artesian\
    \ Watersq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\
    \0\x02\n&xxsq\0~\0\x06t\0\x1dHershey's milk chocolate barssq\0~\0\n\0\0\0\x02\
    sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x03Vxxsq\0~\0\x06t\0\
    \x1cGreat Value Broccoli Floretssq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\
    \0\0\0\x01uq\0~\0\x11\0\0\0\x01dxxsq\0~\0\x06t\0\x13Keystone Ground Beesq\0~\0\
    \n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x02txxsq\0\
    ~\0\x06t\0\tGildan LTsq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01\
    uq\0~\0\x11\0\0\0\x02\x03]xxsq\0~\0\x06t\0&Men's Dual Defense Crew Socks 12 Pairssq\0\
    ~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x05\x14\
    xxsq\0~\0\x06t\0!Wrangler Men's Stretch Cargo Pantsq\0~\0\n\0\0\0\x02sq\0~\0\x0e\
    ����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\a�xxsq\0~\0\x06t\0\x1cLEGO DUPLO\
    \ Town Farm Animalssq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0\
    ~\0\x11\0\0\0\x02\x03�xxsq\0~\0\x06t\0\x06Cinemasq\0~\0\n\0\0\0\x02sq\0~\0\x0e\
    ����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x03ixxsq\0~\0\x06t\0\fSkate rentalsq\0\
    ~\0\n\0\0\0\0sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x01\x1exxsq\0\
    ~\0\x06t\0\x1dSensodyne Pronamel Toothpastesq\0~\0\n\0\0\0\x02sq\0~\0\x0e�����\
    �����������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\a�xxsq\0~\0\x06t\0\x19Chick-fil-A $10\
    \ Gift Cardsq\0~\0\n\0\0\0\0sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\
    \0\0\x01\nxxsq\0~\0\x06t\0\x04Debtsq\0~\0\n\0\0\0\x02sq\0~\0\x0e��������������\
    ��\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x01^xxxsq\0~\0\n\0\0\0\x02sq\0~\0\x0e�������\
    ���������\0\0\0\x01uq\0~\0\x11\0\0\0\x03\x012�xxsq\0~\0\x04\0\0\0\x03w\x04\0\0\
    \0\x03sq\0~\0\x06q\0~\07sq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01\
    uq\0~\0\x11\0\0\0\x02\x03]xxsq\0~\0\x06q\0~\0<sq\0~\0\n\0\0\0\x02sq\0~\0\x0e��\
    ��������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x05\x14xxsq\0~\0\x06q\0~\0Asq\0\
    ~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\a�xxxsq\0\
    ~\0\x04\0\0\0\x03w\x04\0\0\0\x03sq\0~\0\x06q\0~\0Fsq\0~\0\n\0\0\0\x02sq\0~\0\x0e\
    ����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x03�xxsq\0~\0\x06q\0~\0Ksq\0~\0\
    \n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x03ixxsq\0\
    ~\0\x06q\0~\0Psq\0~\0\n\0\0\0\0sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\
    \0\0\0\x01\x1exxxsq\0~\0\x04\0\0\0\bw\x04\0\0\0\bsq\0~\0\x06q\0~\0\tsq\0~\0\n\0\
    \0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\n�xxsq\0~\0\
    \x06q\0~\0\x14sq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\
    \0\0\0\x02\x01^xxsq\0~\0\x06q\0~\0\x19sq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������\
    ������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x02Wxxsq\0~\0\x06q\0~\0\x1esq\0~\0\n\0\0\
    \0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x01�xxsq\0~\0\
    \x06q\0~\0#sq\0~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\
    \0\0\0\x02\n&xxsq\0~\0\x06q\0~\0(sq\0~\0\n\0\0\0\x02sq\0~\0\x0e���������������\
    �\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x03Vxxsq\0~\0\x06q\0~\0-sq\0~\0\n\0\0\0\x02sq\0\
    ~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x01dxxsq\0~\0\x06q\0~\02sq\0\
    ~\0\n\0\0\0\x02sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x02\
    txxxsq\0~\0\x04\0\0\0\x03w\x04\0\0\0\x03sq\0~\0\x06q\0~\0Usq\0~\0\n\0\0\0\x02\
    sq\0~\0\x0e����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\a�xxsq\0~\0\x06q\0\
    ~\0Zsq\0~\0\n\0\0\0\0q\0~\0\\xsq\0~\0\x06q\0~\0_sq\0~\0\n\0\0\0\x02sq\0~\0\x0e\
    ����������������\0\0\0\x01uq\0~\0\x11\0\0\0\x02\x01^xxx"
  learner_created: true
- name: src/budget/model/Product.java
  visible: true
  text: |
    package budget.model;

    import java.io.Serializable;
    import java.math.BigDecimal;

    public class Product implements Serializable {
        private String name;
        private BigDecimal price;


        public Product(String name, BigDecimal price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return name;
        }

        public BigDecimal getPrice() {
            return price;
        }
    }
  learner_created: true
- name: src/budget/controler/BudgetManager.java
  visible: true
  text: |
    package budget.controler;

    import budget.interfaces.BudgetRepository;
    import budget.interfaces.ListRepository;
    import budget.interfaces.ProductRepository;
    import budget.model.Product;

    import java.io.Serializable;
    import java.math.BigDecimal;
    import java.math.RoundingMode;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class BudgetManager implements BudgetRepository, ProductRepository, ListRepository, Serializable {
        private List<Product> food;
        private List<Product> clothes;
        private List<Product> entertainment;
        private List<Product> other;
        private List<Product> all;
        private BigDecimal balance;
      //  private transient Scanner scanner;

        public BudgetManager() {
            food = new ArrayList<>();
            clothes = new ArrayList<>();
            entertainment = new ArrayList<>();
            other = new ArrayList<>();
            all = new ArrayList<>();
            balance = BigDecimal.ZERO;
            //scanner = new Scanner(System.in);
        }

           public BigDecimal getBalance() {
            return balance;
        }

        public void setBalance(BigDecimal balance) {
            this.balance = balance;
        }

        @Override
        public boolean addBalance() {
            System.out.println("\nEnter income:");
            int inputBalance = Integer.parseInt(new Scanner(System.in).nextLine());
            setBalance(getBalance().add(BigDecimal.valueOf(inputBalance)));
            System.out.println("Income was added!");
            return true;
        }

        @Override
        public void showBalance() {
            System.out.println("\nBalance: $" + getBalance().setScale(2, RoundingMode.HALF_EVEN));
        }

        @Override
        public boolean recalculateBalance(BigDecimal productPrice) {
            setBalance(getBalance().subtract(productPrice));
            if (getBalance().compareTo(BigDecimal.ZERO) < 0) {
                setBalance(BigDecimal.ZERO);
            }
            return true;
        }

        @Override
        public boolean addFood() {
            String[] data = enterData();
            food.add(new Product(data[0], new BigDecimal(data[1])));
            recalculateBalance(new BigDecimal(data[1]));
            addAll(data[0], data[1]);
            return true;
        }

        @Override
        public boolean addClothes() {
            String[] data = enterData();
            clothes.add(new Product(data[0], new BigDecimal(data[1])));
            recalculateBalance(new BigDecimal(data[1]));
            addAll(data[0], data[1]);
            return true;
        }

        @Override
        public boolean addEntertainment() {
            String[] data = enterData();
            entertainment.add(new Product(data[0], new BigDecimal(data[1])));
            recalculateBalance(new BigDecimal(data[1]));
            addAll(data[0], data[1]);
            return true;
        }

        @Override
        public boolean addOther() {
            String[] data = enterData();
            other.add(new Product(data[0], new BigDecimal(data[1])));
            recalculateBalance(new BigDecimal(data[1]));
            addAll(data[0], data[1]);
            return true;
        }

        @Override
        public boolean addAll(String productName, String price) {
            all.add(new Product(productName, new BigDecimal(price)));
            return true;
        }

        @Override
        public String[] enterData() {
            String [] returnedData = new String[2];
            System.out.println("\nEnter purchase name:");
            returnedData[0] = new Scanner(System.in).nextLine();
            System.out.println("Enter its price:");
            returnedData[1] = new Scanner(System.in).nextLine();
            System.out.println("Purchase was added!");
            return returnedData;
        }

        @Override
        public void foodList() {
            if (food.isEmpty()) {
                System.out.println("\nPurchase list is empty!");
            } else {
                System.out.println("\nFood:");
                food.forEach(food -> System.out.println(food.getName() + " $" + food.getPrice().setScale(2, RoundingMode.HALF_EVEN)));
                BigDecimal sumPrice = food.stream().map(Product::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
                System.out.println("Total sum: $" + sumPrice);
            }
        }

        @Override
        public void clothesList() {
            if (clothes.isEmpty()) {
                System.out.println("\nPurchase list is empty!");
            } else {
                System.out.println("\nClothes:");
                clothes.forEach(clothes -> System.out.println(clothes.getName() + " $" + clothes.getPrice().setScale(2, RoundingMode.HALF_EVEN)));
                BigDecimal sumPrice = clothes.stream().map(Product::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
                System.out.println("Total sum: $" + sumPrice);
            }
        }

        @Override
        public void entertainmentList() {
            if (entertainment.isEmpty()) {
                System.out.println("\nPurchase list is empty!");
            } else {
                System.out.println("\nEntertainment:");
                entertainment.forEach(entertainment -> System.out.println(entertainment.getName() + " $" + entertainment.getPrice().setScale(2, RoundingMode.HALF_EVEN)));
                BigDecimal sumPrice = entertainment.stream().map(Product::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
                System.out.println("Total sum: $" + sumPrice);
            }
        }

        @Override
        public void otherList() {
            if (other.isEmpty()) {
                System.out.println("\nPurchase list is empty!");
            } else {
                System.out.println("\nOther:");
                other.forEach(other -> System.out.println(other.getName() + " $" + other.getPrice().setScale(2, RoundingMode.HALF_EVEN)));
                BigDecimal sumPrice = other.stream().map(Product::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
                System.out.println("Total sum: $" + sumPrice);
            }
        }

        @Override
        public void allList() {
            if (all.isEmpty()) {
                System.out.println("\nPurchase list is empty!");
            } else {
                System.out.println("\nAll:");
                all.forEach(all -> System.out.println(all.getName() + " $" + all.getPrice().setScale(2, RoundingMode.HALF_EVEN)));
                BigDecimal sumPrice = all.stream().map(Product::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
                System.out.println("Total sum: $" + sumPrice);
            }
        }

        public List<Product> getAll() {
            return all;
        }
    }
  learner_created: true
- name: src/budget/model/Type.java
  visible: true
  learner_created: true
- name: src/budget/strategies/SortingCertainTypeStrategy.java
  visible: true
  learner_created: true
- name: src/budget/strategies/Entertainment.java
  visible: true
  learner_created: true
- name: src/budget/strategies/Clothes.java
  visible: true
  learner_created: true
- name: src/budget/strategies/Other.java
  visible: true
  learner_created: true
- name: src/budget/strategies/All.java
  visible: true
  learner_created: true
- name: src/budget/staticService/Service.java
  visible: true
  learner_created: true
- name: src/budget/strategies/Food.java
  visible: true
  learner_created: true
- name: src/budget/repository/BudgetRepository.java
  visible: true
  learner_created: true
- name: src/budget/controler/PersistentController.java
  visible: true
  learner_created: true
- name: src/budget/repository/PersistentRepository.java
  visible: true
  learner_created: true
- name: src/budget/interfaces/PurchaseMethods.java
  visible: true
  learner_created: true
- name: src/budget/model/Clothes.java
  visible: true
  text: |
    package budget;

    public class Clothes extends Purchase {
        @Override
        public void display() {
            System.out.println("\nClothes:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/model/Entertainment.java
  visible: true
  text: |
    package budget;

    public class Entertainment extends Purchase{
        @Override
        public void display() {
            System.out.println("\nEntertainment:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/model/Food.java
  visible: true
  text: |
    package budget;

    public class Food extends Purchase{
        @Override
        public void display() {
            System.out.println("\nFood:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/model/Other.java
  visible: true
  text: |
    package budget;

    public class Other extends Purchase {
        @Override
        public void display() {
            System.out.println("\nOther:");
            super.display();
        }
    }
  learner_created: true
- name: src/budget/model/Purchase.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/76/stages/425/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 25 Feb 2021 09:33:51 UTC
record: 5
